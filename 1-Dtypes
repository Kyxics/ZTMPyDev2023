# Fundemental data types
int
Eg. 0, 1, -5, 2 + 4
"integers", whole numbers including negatives and zero
Calculations which resolves into a decimal will output as a float
int('x', y) where x is a binary representation (eg. 0b101) and y = 2 will convert binary numbers back to ints (due to y = 2 as "base 2").

float
Eg. 0.5, -25.99, 3.00, 0.00
"floating point", any decimal number, negatives included, that has a decimal, including x.00
Storage of the integer and decimal portions are separate in memory - ergo, will use more memory than ints.
Once a calculation returns a float, it will never auto-output back to int again; this will need casting.

# Numerical operations
# Note: BODMAS applies. I.e. Order of Operations/Precedence: Brackets > Orders (of) > Divisoin > Multiplication > Addition > Subtraction

+
Plus; addition
2+2 will return 4
1+0.2 will return 1.2 as a float

-
Minus; subtraction
2-2 will return 0
1.5 - 5 will return -3.5 as a float

*
Times; muliplication
2*2 will return 4
5.5 *3 will return 16.5 as a float

/
Divide; division
4/2 will return 4
-5/2 will return -2.5 as a float

**
Exponent; to power of
3 ** 2 will return 9 (3 to the power of 2)
1.1 **2 will return 1.21 as a float (1.1 to the power of 2)

//
Floor division (division rounded down)
5//4 will return 1 as a int
-4//3 will return -2 as an int (due to rounding down, it rounds towards the negative)

%
Modulo; division remainder
5%4 will return 1 as an int (1/4 left after 4, thus 1 is taken)
-4%3 will return 1 as an int (1/3 left after 3, thus 1 is taken)

round(int or float)
This will round the function input as per human logic and return as int; < 0.5 will round down, and > 0.5 will round up.
Also works with negatives.

abs(int or float)
Absolute operator in maths (in maths: |-1234|)
Returns strictly postive values of input.

complex(real [,imaginary])
Complex number
Note how the Real and Imaginary component syntax in declaration

bin()
Binary number
Returns input as its binary number with prefix 0b. Type will be Bin for Binary type.

# more can be seen in python docs

bool
I.e. True, False
binery "boolean", only contains True or False

str
Eg. "Hello", 'world', "Synt@x", "Cu$stom_ 123"
"string", anything typable and will be read as 'word characters', including symbols and numbers if used. Is always contained in quotes ("" or '')
Triple quotes ("""...""", '''...''') will treat blocks of text just fine.
Raw strings (r'') will read the quoted string as raw input and ignore any special characters that may have functions tied to them (such as in regex).

list [] - "list", anything contained within brackets are read as an item of the list. Lists are ordered and indexing starts at 0
tuple () - "tuple", similar to a list, but is immutable (unchangeable) once used.
set - "sets"
dict {} - "dictionary", contains <key:value> pairs and is not indexed and is not ordered. Data are accessed by either their key or value.

# Classes - custom data types

# Specialized data types

# None
None - NULL value
